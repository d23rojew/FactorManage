get_feature不可含有特征计算逻辑
get_feature(stock_name:str[], feature_name:str, starttime:datetime, endtime:datetime,freq:str, params:dict):
	#判断是否在数据库中已存在,若存在则直接取出
	rst,lackInfo = get_featureFromDB(stock_name:str[], feature_name:str, starttime:datetime, endtime:datetime,freq:str, params:dict)
		  -->get_featureFromDB:给定标的序列、特征名称、参数、时间频率、时间段,检查数据库，返回缺失(标的,特征名,时间段,频率,参数;
							   与数据库耦合
	if(lackInfo!=null)
		return rst
	#若不存在，则临时计算,并将结果存储返回
	else
		multicalprocess(lackInfo) --并发计算(调用实现了calprocess签名的计算逻辑),统一存储(与数据库耦合);有feature_name->calprocss的字典(or函数字典)
			                      --calprocess(stock_name,timepoint,params)<-策略算法签名，包含计算逻辑，可调用get_feature;get_index最细粒度计算(单标的,单时间点);		
		return get_feature()

get_index(feature_name:str, starttime:datetime, endtime:datetime,params:dict)    --on hold

get_featureFromDB()
feature表结构:
stockcode  fename  timestamp  value  freq(1m;1d;fixed,...)

评估方案:
1、计算因子前，将所有需要的背景数据载入内存;因子绩效评价采用类似方法。
2、SQLite in memory测试:查看内存模式不断读取数据是否比磁盘模式更快

----------------------------------------------------------------------
写barra风险模型
方案:features表中存储原始特征在何处归一化?效率如何?
如何把龙头股、抱团现象纳入多因子框架?
step1：龙头股、热点股、抱团效应定义
根据历史数据，定义龙头(轮动)现象:
股票X上涨=>后期股票Y上涨：
指标:1、支持度(轮动上涨现象在总体样本区间的比例)
	 2、置信度(轮动上涨现象在X上涨中样本区间的比例)
置信度高于一定水平时，可以认为存在轮动现象。此时，可认为Y存在特征f=f(Rx,X)->需要Y对X的敏感度&X具有涨幅，此时可认为特征被激活
对于轮动因子，其驱动源/驱动源*驱动力都需要计算并存储。
目前的特征表结构有问题，取一次特征需要1秒+(X,现在仅需0.005秒)，该获取速度用于计算次生特征不可接受。考虑将不同特征存于不同的表中(不如加索引?)，再试验获取速度。
可计算如下轮动指标:
	1、计算某股票对所有行业的置信度&支持度(10000000*32)
	2、根据置信度、支持度+行业收益，计算轮动指数

feature计算向量化改造:
被调用时:
	划出目标数组;对比已有查找缺漏，组成缺漏数组(numpy)[key1,key2,...]。
	对缺漏数组:
		Calprocess类中必须有便捷外界获取计算原料的接口
(X)
频率变动:驱动敏感矩阵改为月度。

因子模型的预测框架:
目标:对一个资产组合，由其成分股的因子暴露确定组合因子暴露，根据预期因子收益确定下一期组合预期收益.

首先根据理论研究，确定某些因子为alpha,某些因子为风险因子。
对于风险因子，无法预测其下一期因子收益(或通过其它择时方式预测下期收益)；对于alpha因子,可用均值作为其预期收益。

如何确定因子间的协同效应?
(暂时把基础模型做出来看看。因子之间应当相互独立，协同效应理应在构建因子算法时就解决掉)

如何确定新因子的质量(以及判定是否引入新定价信息)?
对风险因子和alpha因子:
	横截面回归时,因子暴露应当可以解释股票收益(即回归出来的系数，因子收益，应该总是显著异于0的;如果一个因子的因子收益总为0，则说明该特征对股票收益基本没有影响)
	将新因子暴露加入多因子模型后，其平均t值应当显著，总体R2应当升高。
	(此类因子可视为待完善因子,分解为其它当期都可观察到的因子暴露&相对稳定的因子收益).
确定alpha因子:
	不同时间点的横截面回归中,因子暴露的系数(因子收益)应该总是正/负的。

这个问题得和评估多因子模型质量一同考虑.
评估模型方法:1、测试多因子模型拟合样本内收益的R2;
			 2、测试多因子模型的预期收益与样本外收益的相关性(IC)
			
			 
因子的类别:--1.因子暴露稳定(股票的特有属性)
           --2.因子暴露不稳定(如股票的行情属性)

如何获取因子暴露?
	1.由股票属性可直接观察的暴露:
		市值，账面市值比etc
		可直接通过特征转换获得(取对数,zscore)，也可构造多空组合-时序回归-获取系数获得
	2.由易变的行情属性
		如反转，动量etc
		仅能直接通过特征转换获得.多空组合仅可用于策略归因，无法用于确定个股暴露
	可考虑将因子暴露转换为序数(百分位).


如何获取因子收益?
1、已知因子暴露，因子收益有2获取方式
   --1.个股收益对因子暴露回归，获取回归系数；
   --2.构造多空组合查看收益.
1、对于宏观指标敏感度因子:(此类因子是否可能有alpha?如何将能源价格的影响融入多因子模型?)
	显然每只股票对石油价格变化的敏感度是不一样的，每只股票对经济形势的抗风险能力也不一样。如何将宏观指标对股票的定价作用融入多因子模型?
	若不计入模型，该定价因素的缺失可能导致相关行业因子/基本面因子的因子收益不稳定(因子收益随宏观指标变化)

对于风险因子，如何预测其因子收益?
	在选定好风险模型之后才可对因子收益进行预测。
	因子收益预测方法:
		对于风险因子:使用一定时间内的平均收益作为因子收益.(等同于认为存在因子动量)
	既是用于股票定价的成果，也是用于检验新因子是否有效的标准.需要建立一个方便不断迭代因子模型的平台.
输入股票特征(descriptor),股票收益;输出风险模型(以及风险模型报告)
对风险模型，输入组合/个股(从数据库获取descriptor),输出预期收益/预期波动/样本内预测质量
可从因子库中选定风险因子(or Alpha因子),选定回测时间，后续给出模型测试报告.

风险模型
1.基础数据平台
  提供基础数据取数api;提供基础特征获取api;基础数据与基础特征的便捷更新。
2.风险模型开发平台
  给出风险模型(即因子的组合)、回测区间、预测期，给出风险模型报告;存储风险模型
  (即存储因子定义、因子预期收益(均值)、因子协方差矩阵)
  如何保证均值求出来的因子预期收益具有预测力？若因子收益与外生变量相关如何处理？
	现有因子择时方法，一是基于动量(这种直接用过往平均收益没问题)
					  二是基于因子拥挤度(即是外生指标【因子暴露多头-空头估值差】对因子收益做修正)
					  三是基于宏观指标(如原油价格可能影响原油因子的收益,股票对原油的因子暴露是准的，但因子收益直接沿用均值不靠谱)
	解决办法：
			宏观指标敏感因子:
				通过研发,将收益不稳定的因子分解为暴露不稳定但收益稳定的因子
				eg:收益对原油价格敏感的股票，可制定新因子:原油因子暴露*上期原油收益
			由因子拥挤导致收益不稳定的:
				因子预警指标:单个因子预警:1.估值差;2.高因子暴露组合收益相关率
							 整体预警:1.市场风险偏好RTI(横截面股票波动与收益秩相关系数)2.分散比率DR(度量因子收益率同步性,因子收益波动率加权和/组合波动率)
				在单独因子出现预警时，调高该因子的波动率?
			在短期内，个股收益应由交易行为主导。可能传统风险因子的收益影响并不大?捕获量价因子、抱团效应和轮动效应才是关键。但发掘风险因子仍是有价值的,这类因子可作为后续研发收益稳定的因子的突破方向。
				量价因子、抱团效应和轮动效应->能否制成暴露不稳定但收益稳定的因子?(暂时只考虑可行性:应该是可行的)
			那么结论是暂时不用对因为交易拥挤造成的风险因子进行预测，对因子暴露稳定、但收益不稳定的外生变量因子,尽力转化为因子暴露不稳但收益稳定的因子
				(收益不稳定因子向收益稳定因子转化，需要投研平台的何种支持?->需要将因子收益稳定性也纳入模型报告指标.模型迭代优化以此为基础建设，在更高一层做.)
			
	接下来考虑模型估计、存储及报告产出的问题。
		模型估计
				标准流程:
					输入时间区间，通过get_feature Api,从数据库获取T(时间点)*N(股票数)*M(特征数)个特征组成的3维矩阵,及T*N个收益组成的收益矩阵,通过不同时间点的
					横截面回归获取因子收益序列、风险模型报告对象(同时也是收益预测对象,实现了forcast方法和Report方法)
				问题:winsor\log\zscore等数据预处理操作放在哪里？(应该可以不用存储,在取特征api中实现)
	

  估算风险模型的时间:
	1.风险模型报告指标:
		1.各因子收益序列累积收益图；
		2.各因子收益序列统计量(mean\std\sharp\IC\IR)
		3.因子暴露的方差/协方差矩阵，因子收益的方差/协方差矩阵
		4.横截面回归质量(ADJ-R2)
	2.单因子测试报告指标
		根据控制因子，在有/无待测试因子的情况下分别构建风险模型，对比报告指标;
		对单因子，对控制因子回归获取残差后构造多-空组合，查看收益图
		
	需要:获取时间区间内的因子暴露
	
	定义接口:
		Class MultiFactorModel:
			构造器:因子对象(包括参数)序列;起止日期;预测期(n day);数据排除选项:当列表中的属性非0时,排除该股票参与回归:eg.停牌控制/st控制/IPO控制/涨跌停控制;
			        缺失值处理:使用python自带的回归缺失值处理;标准化:winsor后标准化,置于因子对象中。由get_feature承担只涉及单因子的预处理任务.
				在构造时就跑模型,得到统计结果
			域:
				因子列表factors;
				起止日期;
				预测期;
				统计结果
			方法:
				export:输出统计结果(到文件 or 到控制台)
		Class SingleFactorCheck:
			构造器:因子对象;控制因子对象列表+起止日期+预测期 OR MultiFactorModel的对象;排除属性:[停牌控制/st控制/IPO控制/涨跌停控制/缺失值填充];
				在构造时就跑一次控制模型/一次完整模型
				跑单因子测试报告(对控制因子回归获取残差后构造多-空组合，获得收益序列)
		
		因子对象改造:
		Factor:需记录参数、预处理信息(为了构造singleFactorCheck和MultiFactorModel的框架方便。这两个类应该只关心自己的检验逻辑，因子如何形成与它们无关.)
		问题:如何解决重复多次获取单只股票预处理后特征的问题?
		--ans:由于在进行特征计算时特征算法被调用的频次非常多,在特征算法中，规定用get_feature时不能使用需要全局数据进行的预处理设置(如winsor/zsocre)，
			  但只需要特征自身进行的预处理(如取对数\去nan)可以使用。
		
		get_feature改造:get_feature(stock_name:list,feature_name:str,starttime:datetime, endtime:datetime,freq:str, params:dict,check:bool=True)
					  ->get_feature(stock_name:list,feature:Describor,starttime:datetime, endtime:datetime,freq:str, params:dict,check:bool=True)
			
				
------------------------------------------------------------------------------
择时框架
0、信号最终应当在时间序列上被映证对收益具有预测力；
1、应存在一些宏观指标，对各类资产收益存在普遍预测力，但效果不统一；
2、资产收益应当对由资产自身计算出来的特征序列敏感，且该特征算法应用到其它资产应有统一效果
3、对于某个资产，信号之间的预测力应当独立(有交互作用的，应当将交互作用作为新信号)

构造择时研究平台
可针对特定资产进行择时研究，输出个性化择时模型
思路:
    构建指数库:
        1、特征算法
        2、宏观指标
用于择时的特征序列必须是时变的(长期不变的基本面特征(如资产净值)无法择时);
可以对特征类(Descriptor)进行标记:特征类型->稳固/时变(时变特征可用于择时)

思考问题:1、能否区分情景?(可)
常用择时模型(均线交叉/海龟/蜘蛛网/)

现有框架可以提供:套用到各类资产序列上的特征、公用指数
1、如何用这类资源进行灵活的择时研究?
如何研究:
    1、对给定的通用特征展开特征时序质量评估研究。
        目的是了解特征适应资产的特性，作为1中特征选择的依据。给出测试报告，该报告可存储并可作为参考供阶段2调用
        通常会在某类资产(股票类，期货类)上做测试。
        评价:(样本外)使用评价指标.
             1、对某些特征，不需要要求特征的值对收益有对称影响力
                (如形态相似度量)(需要转化为0-1特征)
             2、某些特征可能指示了股票可能下跌？总之，特征的有无应能使资产收益在时序上有区分度。
             3、离散特征与连续特征能否使用统一的评价指标？单变量回归应该可以.R2和显著度.
    2、对给定的资产/训练时段/验证时段展开模型研究。
        目的是针对该资产的时间序列收益作出可靠的预测，通过特征选择、特征参数优化尽可能提高预测精度
          评价：总体模型评价(单标的内的模型互相比较;时间序列回归样本外离差和):
          优化:人工特征挑选;参数优化
        2、研究成果为何种形式？
            1、对通用特征：特征对各资产收益的影响度(回归系数&显著度?)
            2、对个性特征:记录方式与通用特征一样，但评价方式不同(在时间序列上要求更严格)
    3、对adaboost集成，如何保证某些查准率高、查全率低特征在最终模型中的确定性作用？
        弱学习器必须具备(不投票)分类;在boost迭代时，不投票与错误分类样本被赋予更高权重;在集成为强学习器时，(不投票)的弱学习器不参与进入最终结果的投票加权

3、动态特征生成(待定)//

必须的交易模块：
特征算法必须能直接复用于实时交易.(How to do it?)
日度策略:直接以现有get_feature、为输入，形成调仓列表， 委托下单模块次日下单


----------------------------------------------------------------------------------
定时任务:
每日:
    1、增量(非自检模式)刷新行情数据
    2、刷新在用日模型因子数据
    3、根据上层模型权重&上层模型权重->当日时间，计算上层权重行情变化后权(w_base权重)
    4、根据在用日模型、base权重，计算最优调仓权重w_adj
    5、将w_base+w_adj目标权重交予交易引擎
    6、记录本次调仓向量w_adj,根据上个周期调仓向量计算已实现收益w_adj_(t-1)*r_d_(t-1)并记录。
       ----------------
       多周期模型的嵌套调仓:
       ----------------
            为充分利用各个时间周期的异常定价机会，可构造多个周期的多因子预测模型，短周期模型可
       修正长周期模型的仓位以提高短期边际收益贡献。长周期必须为短周期的整数倍，并且这个修
       正调仓可以嵌套。
            下面假定我们的模型组为:日模型、周模型、双周模型、四周模型
            .每四周、每双周、每周、每日定期运行该周期的预测模型，并进行相应调仓
            .每次调仓会记录该笔调仓的模型来源、调整日期及调整向量w_adj.
            .每次调仓的优化目标是它预测周期本身的风险调整后、父周期机会成本调整后收益，具体为:
            max z = 【周期增量收益率】w_adj * r_t
                   -【周期增量风险】lambda*(risk_after-risk_before)
                   -【复原父周期仓位交易成本】w_adj * fee_Rate
            s.t:
                0 < w_fathernow + w_adj < I;
                w_adj*I = 0;
            注:
                w_fathernow:假设不进行调仓,父周期初始仓位w_origin随行情变化至当时的仓位
                w_adj:目标仓位相对于父周期仓位w_fathernow的调整量
                risk_before:w_fathernow权重下,子周期中组合收益标准差
                risk_after:调整后(w_fathernow + w_adj)权重下,子周期中组合收益标准差
            在底层周期模型需调仓时，簿记前底层周期模型区间实现收益;将(|w_adj_new|+|w_adj_old|-|w_adj_new-w_adj_old|)部分的
            收益归属于前底层周期
            在父周期模型需要调仓时，子周期模型的开放仓位从低到高逐级关闭(仓位回归至w_fathernow);由此产
            生手续费共为(假定该周期层级为3):
                feerate*(|w_adj_old_l1|+|w_adj_old_l2|+|w_adj_old_l3|)
            然后再展开放新一期调整
                feerate*(|w_adj_new_l3|+|w_adj_new_l2|+|w_adj_new_l1|)
            但交易之间会相互抵消，因此实际的手续费为
                feerate*|w_adj_new_l3+w_adj_new_l2+w_adj_new_l1-w_adj_old_l1-w_adj_old_l2-w_adj_old_l3|
            将该手续费节省全部归属给上个父周期模型。

----------------------------------------------------------
1、MultiFactor模型:
--需能提供因子列表、预期因子收益、因子协方差矩阵;    --done
--自身带有模型检验(回测)方法和样本外测试方法;        --half done,不紧要
--可存储(表里只存储现役模型，只以预测时期为主键，字段描述因子列表和预测时期) --需改造，存储时增加描述字段，读取时增加预测期参数

2、Markowitz权重增量优化器:
--输入:1、现有持仓权重+股价+调仓费率+固定费用
       2、股票因子暴露、因子预期收益、因子协方差、最新股价
       在此基础上，给出增量收益最大、增量风险最小的调整方案
--输出:还是以权重的形式输出
--可归因性:
       权重优化器的每次调仓，返回调仓权重、调仓成本、预期收益
--可嵌套性:
       源于可在现有持仓的基础上做出最优决策


3、日程模块:
维护一个在役模型表【层级、周期、模型】
维护一个历史栈表,栈中元素记录了每次调仓的
【发生日期、层级、周期、模型、当前净值、目标持仓权重、调仓成本、预期收益、平仓时间】
每日运行一次平仓检查，从底层到高层检查是否有层级需要平仓
若有，从高到低生成一个待平仓list
有一个平仓函数def closeHandler(),平仓时记录平仓实现收益
closeHandler 遍历平仓list执行平仓
对照在役模型表、历史栈表运行开仓检查:
    从底层开始，逐层比对该层模型是否已开仓；
    若已开仓，跳过；若未开仓，则如果上层模型存在且上层模型剩余期能整除该层在役模型则开仓

平仓动作closeHandler:
    1、改变历史栈表状态，填写平仓时间
    2、提交目标权重(即经行情调整后的上层权重)->这个在内存变量里，提交给下单程序后消失
开仓动作:
    1、根据base权重，Markowitz权重增量优化器，该层模型提交新目标权重
    2、历史栈表新增一行，记录发生时间、层级、周期、模型、净值、目标、预期收益等信息


目前开发位置:
Markowitz权重增量优化器
-->需要测试Markowitz优化器
        -->需要获取某时间点，多股票多个因子的暴露矩阵
                 -->需要改造get_feature函数，支持单时间点多因子、多股票查询 --20200908
                                                                         --20200909 done
-->已在cvxpy中表达出组合优化问题。求解发现问题:
        -->cvxpy提示目标函数不符合DCP;
        -->简化目标函数，提示向量过长溢出。
        -->已获得mosek的学术licence，待试用;
           已自编贪心法组合优化器。              --2020-10-07

-->让multiFactor、portfolioOptimizor、OrderExecutor兼容：
    -->确定接口:
            multiFactor:forcaststkreturn方法需包括现金代码"cash";
                        增加forcaststkcov方法;
            portfolioOptimizor:
                       产出项为{'orderbook':orderbook      --orderbook:字典{stkcode:buyamt(股数)}
                                ,'position':after_adj_hold  --after_adj_hold:字典{stkcode:holdamt(股数)}
                                ,'expRet':expRet  --expRet:数值
                                ,'expVar':expVar  --expVar:数值
                                ,'expStockRet':expStockRet}  --字典{stkcode:return}
                                (orderbook,after_adj_hold,expStockRet)均包括现金代码cash
            OrderExecutor:
                        检测getBaseFromDB、makeOptimizeOrder是否可在以上两者的条件下顺利执行.


-->使用easytrader连接银河证券客户端实现自动化下单、平仓。

-->开发一个可盈利多因子定价模型，每日输出仓位指令。

研发流程:
1、对于研报、论文中提取出的新因子算法，

运维流程:

-->增加目标仓位、实际完成仓位
模型优化的base为【实际完成仓位+送股赠股调整后的股票数】
模型表现归因:期望收益-实际收益 =  期望下单量*期望收益 - 实际下单量*实际收益
                             =  期望下单量*（期望收益-实际收益）  -->收益预测偏差
                               +期望收益*（期望下单量-实际下单量） -->订单执行偏差
                               - (期望下单量-实际下单量)(期望收益-实际收益)  -->高阶小量


